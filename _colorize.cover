    1: import io
    1: import os
    1: import sys
       
    1: COLORIZE = True
       
       
    2: class ANSIColors:
    1:     BOLD_GREEN = "\x1b[1;32m"
    1:     BOLD_MAGENTA = "\x1b[1;35m"
    1:     BOLD_RED = "\x1b[1;31m"
    1:     GREEN = "\x1b[32m"
    1:     GREY = "\x1b[90m"
    1:     MAGENTA = "\x1b[35m"
    1:     RED = "\x1b[31m"
    1:     RESET = "\x1b[0m"
    1:     YELLOW = "\x1b[33m"
       
       
    1: NoColors = ANSIColors()
       
   39: for attr in dir(NoColors):
   38:     if not attr.startswith("__"):
    9:         setattr(NoColors, attr, "")
       
       
    1: def get_colors(colorize: bool = False, *, file=None) -> ANSIColors:
           if colorize or can_colorize(file=file):
               return ANSIColors()
           else:
               return NoColors
       
       
    1: def can_colorize(*, file=None) -> bool:
           if file is None:
               file = sys.stdout
       
           if not sys.flags.ignore_environment:
               if os.environ.get("PYTHON_COLORS") == "0":
                   return False
               if os.environ.get("PYTHON_COLORS") == "1":
                   return True
           if os.environ.get("NO_COLOR"):
               return False
           if not COLORIZE:
               return False
           if os.environ.get("FORCE_COLOR"):
               return True
           if os.environ.get("TERM") == "dumb":
               return False
       
           if not hasattr(file, "fileno"):
               return False
       
           if sys.platform == "win32":
               try:
                   import nt
       
                   if not nt._supports_virtual_terminal():
                       return False
               except (ImportError, AttributeError):
                   return False
       
           try:
               return os.isatty(file.fileno())
           except io.UnsupportedOperation:
               return file.isatty()
